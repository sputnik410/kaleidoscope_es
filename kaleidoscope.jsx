var window = new Window('palette','KS');var linkGridDimensionsBool = true;window.optPnl = window.add('panel', undefined, 'Options');//Grid Widthwindow.optPnl.gridWTitle = window.optPnl.add('statictext', undefined, 'Grid Width');window.optPnl.gridW = window.optPnl.add('edittext', undefined, 2);window.optPnl.gridW.bounds = {x: undefined, y: undefined, width: 50, height: 20};window.optPnl.gridW.onChange = function() {        if (linkGridDimensionsBool == true) {            window.optPnl.gridH.text = window.optPnl.gridW.text;        }    };//Grid Heightwindow.optPnl.gridHTitle = window.optPnl.add('statictext', undefined, 'Grid Height');window.optPnl.gridH = window.optPnl.add('edittext', undefined, 2);window.optPnl.gridH.bounds = {x: undefined, y: undefined, width: 50, height: 20};window.optPnl.gridH.onChange = function() {    if( linkGridDimensionsBool == true){        window.optPnl.gridW.text = window.optPnl.gridH.text;        }    };//Proportional grid Checkboxwindow.optPnl.linkCheckBox = window.optPnl.add('checkbox', undefined, 'Link w/h?');window.optPnl.linkCheckBox.value = linkGridDimensionsBool;window.optPnl.linkCheckBox.onClick = function() {        if (window.optPnl.linkCheckBox.value == true) linkGridDimensionsBool = true;        else linkGridDimensionsBool = false;    };//Time Wigglewindow.optPnl.timeWiggleTitle = window.optPnl.add('statictext', undefined, 'Time Wiggle Amount (frames)');window.optPnl.timeWiggle = window.optPnl.add('slider', undefined, 24, 0, 120, {name: 'timeWiggleSlider'});window.optPnl.timeWiggleVal = window.optPnl.add('statictext', undefined, window.optPnl.timeWiggle.value);window.optPnl.timeWiggleVal.bounds = {x:undefined, y:undefined, width:20, height:20};window.optPnl.timeWiggle.onChanging = function() {    window.optPnl.timeWiggleVal.text = window.optPnl.timeWiggle.value;    };window.btnPnl = window.add('panel', undefined, undefined);window.btnPnl.testBtn = window.btnPnl.add('button', undefined, 'Run');//Run when button is clickedwindow.btnPnl.testBtn.onClick = function() {    var comp = app.project.activeItem;    var wopt = window.optPnl;    var settings = {            gridWidth: wopt.gridW.text,            gridHeight: wopt.gridH.text,            compRes: [comp.width, comp.height],            timeWiggle: wopt.timeWiggle.value, //upper limit of random frame variation        }    function checkGridInput() {            var gridTotal = settings.gridWidth*settings.gridHeight;            if (gridTotal > app.project.activeItem.numLayers) throw "Too few layers for grid";            else createGrid();        }    try {        checkGridInput();        } catch (err) {            alert("Error: " + err);        }    function createGrid() {        app.beginUndoGroup("Grid");                var frameWidth = settings.compRes[0]/settings.gridWidth;        var frameHeight = settings.compRes[1]/settings.gridHeight;                var index = 1;        for (var x = 0; x <= settings.gridWidth-1; x++){            for (var y = 0; y <= settings.gridHeight-1; y++){                var currLayer = app.project.activeItem.layer(index);                               var currFramePosX = x*frameWidth;                var currFramePosY = y*frameHeight;                                        //Set size of layer                //Math mess helps give us a percentage value since AE is picky like that                //NOTE: currently only works when source and project resolutions match                currLayer.scale.setValue([100*(frameWidth/settings.compRes[0]), 100*(frameHeight/settings.compRes[1])]);                                //Set layer position                currLayer.position.setValue([currFramePosX, currFramePosY]);                                currLayer.anchorPoint.setValue([0,0]);                                if (settings.timeWiggle > 0){                    var randTimeOffset = getRandomInt(0, settings.timeWiggle);                    currLayer.startTime += randTimeOffset;                    }                                index++;            }        }        alert("Done!");        app.endUndoGroup();        } };//Helper function to both generate random frame number and convert it to seconds so we can set the in point laterfunction getRandomInt(min, max) {    var rand = Math.floor(Math.random() * (max - min + 1)) + min;    return currentFormatToTime(rand, app.project.activeItem.frameRate, true);}window.show();